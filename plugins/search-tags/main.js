/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var dateRegex = new RegExp(/date: \d{4}\-(0?[1-9]|1[012])\-(0?[1-9]|[12][0-9]|3[01])*/ig);
var tagRegex = new RegExp(new RegExp("(?<=[\\s>]|^)#(\\w*[A-Za-z_/-]+\\w*)", "ig"));
var DEFAULT_SETTINGS = {
  mySetting: "default"
};
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      const cached = yield this.loadCachedStruct();
      let modalSelector = new SelectorModal(this.app, cached);
      this.addCommand({
        id: "open-modal",
        name: "Open Tag Selector",
        checkCallback: (checking) => {
          if (!checking) {
            modalSelector.open();
          }
          return true;
        }
      });
      this.addSettingTab(new SampleSettingTab(this.app, this));
      this.registerEvent(this.app.metadataCache.on("changed", (file, data, cache) => {
        cached.setFileMap(file, cache, data);
      }));
      this.registerEvent(this.app.metadataCache.on("deleted", (file, data) => {
        cached.deleteFileMap(file);
      }));
    });
  }
  loadCachedStruct() {
    return __async(this, null, function* () {
      const { vault } = this.app;
      var cached = new CachedStruct();
      vault.getMarkdownFiles().map((file) => {
        vault.read(file).then((data) => {
          cached.setFileMap(file, this.app.metadataCache.getFileCache(file), data);
        });
      });
      return cached;
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var SELECTION_KIND = {
  ORPHAN: "orphan",
  METATAG: "metatag",
  CONTENT: "content"
};
var CachedStruct = class {
  constructor() {
    this.files = [];
  }
  deleteFileMap(file) {
    this.files = this.files.filter((x) => x.file != file);
  }
  setFileMap(file, cache, data) {
    var _a, _b, _c;
    this.deleteFileMap(file);
    let hasHeader = false;
    let selections = [];
    let pathTag = null;
    const pathSpl = file.path.split("/");
    if (pathSpl.length > 1) {
      pathTag = "#" + pathSpl[pathSpl.length - 2];
    }
    let headerTags = [];
    const date = (_b = (_a = data.match(dateRegex)) == null ? void 0 : _a.first()) == null ? void 0 : _b.substring(6);
    let contentData = data;
    if ((cache == null ? void 0 : cache.frontmatter) != null) {
      contentData = contentData.substring(cache.frontmatter.position.end.offset);
      contentData = contentData.trimStart();
      (_c = (0, import_obsidian.parseFrontMatterTags)(cache.frontmatter)) == null ? void 0 : _c.forEach((t) => headerTags.push(t));
      if (pathTag != null) {
        headerTags.push(pathTag);
      }
      if (date != null) {
        headerTags.push(date);
      }
    }
    if (headerTags.length > 0) {
      hasHeader = true;
      selections.push({
        cursor: 0,
        description: contentData.substring(0, 400),
        tags: headerTags.sort().filter(function(elem, index, self) {
          return index === self.indexOf(elem);
        })
      });
    }
    if ((cache == null ? void 0 : cache.tags) == null && headerTags.length == 0) {
      selections.push({
        cursor: 0,
        description: "",
        tags: []
      });
    }
    if ((cache == null ? void 0 : cache.tags) != null) {
      const dataSpl = data.split("\n");
      let offset = 0;
      for (let i = 0; i < dataSpl.length; i++) {
        const paragraph = dataSpl[i];
        const tagIdx = paragraph.search(tagRegex);
        if (tagIdx != -1) {
          const tags = [...paragraph.matchAll(tagRegex)].map((k) => k[0]).join().replace("/", ",").split(",");
          tags.push(...headerTags);
          selections.push({
            cursor: i,
            description: contentData.substring(offset + tagIdx - 200, offset + tagIdx + 200),
            tags: tags.sort().filter(function(elem, index, self) {
              return index === self.indexOf(elem);
            })
          });
        }
        offset += paragraph.length;
      }
    }
    this.files.push({
      fileTags: selections,
      file,
      date,
      hasHeader
    });
    this.files.sort((a, b) => {
      if (a.date == void 0) {
        return 1;
      }
      if (b.date == void 0) {
        return -1;
      }
      return a.date > b.date ? -1 : 1;
    });
  }
  search(query) {
    const getOrphan = query.startsWith("!");
    const getNoMd = query.startsWith("!!");
    let selections = [];
    let allTags = [];
    for (const file of this.files) {
      if (getNoMd && !file.hasHeader) {
        selections.push({
          path: file.file.path,
          file: file.file,
          hasHeader: false,
          kind: SELECTION_KIND.METATAG,
          cursor: 0,
          description: "",
          tags: []
        });
      }
      if (getOrphan && file.fileTags.length == 0) {
        selections.push({
          path: file.file.path,
          file: file.file,
          hasHeader: false,
          kind: SELECTION_KIND.ORPHAN,
          cursor: 0,
          description: "",
          tags: []
        });
      }
      let isFirst = true;
      for (const fileTag of file.fileTags) {
        let toSelection = true;
        for (const subQuery of query.split(" ")) {
          const tagsJoin = fileTag.tags.join();
          if (!tagsJoin.contains(subQuery)) {
            toSelection = false;
            break;
          }
        }
        if (toSelection) {
          let kind = SELECTION_KIND.CONTENT;
          if (isFirst) {
            kind = SELECTION_KIND.METATAG;
          }
          isFirst = false;
          selections.push({
            hasHeader: file.hasHeader,
            file: file.file,
            path: file.file.path,
            kind,
            cursor: fileTag.cursor,
            description: fileTag.description,
            tags: fileTag.tags
          });
          allTags.push(...fileTag.tags);
        }
      }
    }
    return {
      selections,
      tags: allTags.unique()
    };
  }
  getAll() {
    return this.files;
  }
};
var SelectorModal = class extends import_obsidian.SuggestModal {
  constructor(app2, cache) {
    super(app2);
    this.cached = cache;
    this.setInstructions([
      { command: "\u2191\u2193", purpose: "to navidate" },
      { command: "\u21B5", purpose: "to open" },
      { command: "esc", purpose: "to dismiss" }
    ]);
    this.modalEl.style.setProperty("max-width", "90vw");
    this.modalEl.style.setProperty("width", "100%");
    this.modalEl.style.setProperty("max-height", "80vh");
    this.modalEl.style.setProperty("height", "100%");
    this.setPlaceholder("Type one tag or multiple (eg.: tag1 tag2)");
    this.limit = 20;
    this.tagContainer = this.modalEl.createEl("p");
    this.tagContainer.insertAfter(this.inputEl);
  }
  getSuggestions(query) {
    const container = this.cached.search(query);
    this.renderTags(container.tags);
    return container.selections;
  }
  renderSuggestion(value, el) {
    if (value.kind == SELECTION_KIND.CONTENT) {
      const selection = el.createEl("div", { cls: "selection-content" });
      const title = selection.createEl("div", { cls: "selection__title" });
      const tagContainer = title.createEl("span", { text: " " });
      for (let i = 0; i < value.tags.length; i++) {
        tagContainer.createEl("a", { text: value.tags[i], cls: "tag selection__tag" });
      }
      selection.createEl("small", { text: value.description, cls: "selection__description" });
    } else if (value.kind == SELECTION_KIND.ORPHAN) {
      const selection = el.createEl("div", { cls: "selection" });
      selection.createEl("div", { text: value.path, cls: "selection__title_bad" });
    } else if (value.kind == SELECTION_KIND.METATAG) {
      const selection = el.createEl("div", { cls: "selection" });
      const title = selection.createEl("div", { text: value.path, cls: "selection__title" });
      const tagContainer = title.createEl("span", { text: " " });
      for (let i = 0; i < value.tags.length; i++) {
        tagContainer.createEl("a", { text: value.tags[i], cls: "tag selection__tag" });
      }
      title.createEl("small", { text: !value.hasHeader ? " \u2192 (miss metadata)" : "", cls: "selection__title_bad" });
      selection.createEl("small", { text: value.description, cls: "selection__description" });
    }
  }
  onChooseSuggestion(item, evt) {
    const leaf = app.workspace.getLeaf(false);
    leaf.openFile(item.file).then(() => {
      var _a;
      if (((_a = leaf.view) == null ? void 0 : _a.getViewType()) === "markdown") {
        const md = leaf.view;
        md.editor.setCursor(item.cursor);
        const ep = md.editor.getCursor();
        md.editor.scrollIntoView({ from: ep, to: ep }, true);
      }
    });
  }
  renderTags(tags) {
    this.tagContainer.empty();
    for (const tag of tags.splice(0, 20)) {
      this.tagContainer.createEl("a", { text: tag, cls: "tag selection__tag" });
    }
  }
  onOpen() {
    const container = this.cached.search("");
    this.renderTags(container.tags);
    for (const sugestion of container.selections) {
      this.renderSuggestion(sugestion, this.resultContainerEl);
    }
    super.onOpen();
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  open() {
    super.open();
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for my awesome plugin." });
    new import_obsidian.Setting(containerEl).setName("My setting").setDesc("It's a secret").addText((text) => text.setPlaceholder("Enter your secret").setValue(this.plugin.settings.mySetting).onChange((value) => __async(this, null, function* () {
      console.log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      yield this.plugin.saveSettings();
    })));
  }
};
