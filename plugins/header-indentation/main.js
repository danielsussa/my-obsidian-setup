/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var indentHeading = import_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = indentHeadingExec(view);
  }
  update(update) {
    this.decorations = indentHeadingExec(update.view);
  }
}, {
  decorations: (v) => v.decorations
});
function indentHeadingExec(view) {
  const builder = new import_state.RangeSetBuilder();
  let currClass = "cm-line-child-p";
  for (const { from, to } of view.visibleRanges) {
    for (let pos = from; pos <= to; ) {
      const line = view.state.doc.lineAt(pos);
      const lineText = view.state.doc.lineAt(pos);
      pos = line.to + 1;
      if (lineText.text.startsWith("###### ")) {
        currClass = "cm-line-child-h6";
        continue;
      }
      if (lineText.text.startsWith("##### ")) {
        currClass = "cm-line-child-h5";
        continue;
      }
      if (lineText.text.startsWith("#### ")) {
        currClass = "cm-line-child-h4";
        continue;
      }
      if (lineText.text.startsWith("### ")) {
        currClass = "cm-line-child-h3";
        continue;
      }
      if (lineText.text.startsWith("## ")) {
        currClass = "cm-line-child-h2";
        continue;
      }
      if (lineText.text.startsWith("# ")) {
        currClass = "cm-line-child-h1";
        continue;
      }
      builder.add(line.from, line.from, import_view.Decoration.line({
        attributes: { class: currClass }
      }));
    }
  }
  return builder.finish();
}
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerEditorExtension(indentHeading);
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQge1xuXHREZWNvcmF0aW9uLFxuXHREZWNvcmF0aW9uU2V0LFxuXHRFZGl0b3JWaWV3LFxuXHRWaWV3UGx1Z2luLFxuXHRWaWV3VXBkYXRlLFxufSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xuaW1wb3J0IHtSYW5nZVNldEJ1aWxkZXJ9IGZyb20gXCJAY29kZW1pcnJvci9zdGF0ZVwiO1xuLy8gQHRzLWlnbm9yZVxuXG5cblxuY29uc3QgaW5kZW50SGVhZGluZyA9IFZpZXdQbHVnaW4uZnJvbUNsYXNzKGNsYXNzIHtcblx0ZGVjb3JhdGlvbnM6IERlY29yYXRpb25TZXRcblxuXHRjb25zdHJ1Y3Rvcih2aWV3OiBFZGl0b3JWaWV3KSB7XG5cdFx0dGhpcy5kZWNvcmF0aW9ucyA9IGluZGVudEhlYWRpbmdFeGVjKHZpZXcpXG5cdH1cblxuXHR1cGRhdGUodXBkYXRlOiBWaWV3VXBkYXRlKSB7XG5cdFx0dGhpcy5kZWNvcmF0aW9ucyA9IGluZGVudEhlYWRpbmdFeGVjKHVwZGF0ZS52aWV3KVxuXHR9XG59LCB7XG5cdGRlY29yYXRpb25zOiB2ID0+IHYuZGVjb3JhdGlvbnMsXG5cbn0pXG5cbmZ1bmN0aW9uIGluZGVudEhlYWRpbmdFeGVjKHZpZXc6IEVkaXRvclZpZXcpIHtcblxuXHRjb25zdCBidWlsZGVyID0gbmV3IFJhbmdlU2V0QnVpbGRlcjxEZWNvcmF0aW9uPigpXG5cblx0bGV0IGN1cnJDbGFzcyA9IFwiY20tbGluZS1jaGlsZC1wXCJcblxuXHRmb3IgKGNvbnN0IHtmcm9tLCB0b30gb2Ygdmlldy52aXNpYmxlUmFuZ2VzKSB7XG5cdFx0Zm9yIChsZXQgcG9zID0gZnJvbTsgcG9zIDw9IHRvOykge1xuXG5cdFx0XHRjb25zdCBsaW5lID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KHBvcylcblx0XHRcdGNvbnN0IGxpbmVUZXh0ID0gdmlldy5zdGF0ZS5kb2MubGluZUF0KHBvcylcblx0XHRcdHBvcyA9IGxpbmUudG8gKyAxXG5cblx0XHRcdGlmIChsaW5lVGV4dC50ZXh0LnN0YXJ0c1dpdGgoXCIjIyMjIyMgXCIpKSB7XG5cdFx0XHRcdGN1cnJDbGFzcyA9IFwiY20tbGluZS1jaGlsZC1oNlwiXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cdFx0XHRpZiAobGluZVRleHQudGV4dC5zdGFydHNXaXRoKFwiIyMjIyMgXCIpKSB7XG5cdFx0XHRcdGN1cnJDbGFzcyA9IFwiY20tbGluZS1jaGlsZC1oNVwiXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cdFx0XHRpZiAobGluZVRleHQudGV4dC5zdGFydHNXaXRoKFwiIyMjIyBcIikpIHtcblx0XHRcdFx0Y3VyckNsYXNzID0gXCJjbS1saW5lLWNoaWxkLWg0XCJcblx0XHRcdFx0Y29udGludWVcblx0XHRcdH1cblx0XHRcdGlmIChsaW5lVGV4dC50ZXh0LnN0YXJ0c1dpdGgoXCIjIyMgXCIpKSB7XG5cdFx0XHRcdGN1cnJDbGFzcyA9IFwiY20tbGluZS1jaGlsZC1oM1wiXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cdFx0XHRpZiAobGluZVRleHQudGV4dC5zdGFydHNXaXRoKFwiIyMgXCIpKSB7XG5cdFx0XHRcdGN1cnJDbGFzcyA9IFwiY20tbGluZS1jaGlsZC1oMlwiXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cdFx0XHRpZiAobGluZVRleHQudGV4dC5zdGFydHNXaXRoKFwiIyBcIikpIHtcblx0XHRcdFx0Y3VyckNsYXNzID0gXCJjbS1saW5lLWNoaWxkLWgxXCJcblx0XHRcdFx0Y29udGludWVcblx0XHRcdH1cblxuXHRcdFx0YnVpbGRlci5hZGQobGluZS5mcm9tLCBsaW5lLmZyb20sIERlY29yYXRpb24ubGluZSh7XG5cdFx0XHRcdGF0dHJpYnV0ZXM6IHtjbGFzczogY3VyckNsYXNzfVxuXHRcdFx0fSkpXG5cblx0XHR9XG5cdH1cblx0cmV0dXJuIGJ1aWxkZXIuZmluaXNoKClcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTXlQbHVnaW4gZXh0ZW5kcyBQbHVnaW4ge1xuXHRhc3luYyBvbmxvYWQoKSB7XG5cdFx0dGhpcy5yZWdpc3RlckVkaXRvckV4dGVuc2lvbihpbmRlbnRIZWFkaW5nKVxuXHR9XG5cblx0b251bmxvYWQoKSB7XG5cdH1cblxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsc0JBQXVEO0FBQ3ZELGtCQU1PO0FBQ1AsbUJBQThCO0FBSzlCLElBQU0sZ0JBQWdCLHVCQUFXLFVBQVUsTUFBTTtBQUFBLEVBR2hELFlBQVksTUFBa0I7QUFDN0IsU0FBSyxjQUFjLGtCQUFrQixJQUFJO0FBQUEsRUFDMUM7QUFBQSxFQUVBLE9BQU8sUUFBb0I7QUFDMUIsU0FBSyxjQUFjLGtCQUFrQixPQUFPLElBQUk7QUFBQSxFQUNqRDtBQUNELEdBQUc7QUFBQSxFQUNGLGFBQWEsT0FBSyxFQUFFO0FBRXJCLENBQUM7QUFFRCwyQkFBMkIsTUFBa0I7QUFFNUMsUUFBTSxVQUFVLElBQUksNkJBQTRCO0FBRWhELE1BQUksWUFBWTtBQUVoQixhQUFXLEVBQUMsTUFBTSxRQUFPLEtBQUssZUFBZTtBQUM1QyxhQUFTLE1BQU0sTUFBTSxPQUFPLE1BQUs7QUFFaEMsWUFBTSxPQUFPLEtBQUssTUFBTSxJQUFJLE9BQU8sR0FBRztBQUN0QyxZQUFNLFdBQVcsS0FBSyxNQUFNLElBQUksT0FBTyxHQUFHO0FBQzFDLFlBQU0sS0FBSyxLQUFLO0FBRWhCLFVBQUksU0FBUyxLQUFLLFdBQVcsU0FBUyxHQUFHO0FBQ3hDLG9CQUFZO0FBQ1o7QUFBQSxNQUNEO0FBQ0EsVUFBSSxTQUFTLEtBQUssV0FBVyxRQUFRLEdBQUc7QUFDdkMsb0JBQVk7QUFDWjtBQUFBLE1BQ0Q7QUFDQSxVQUFJLFNBQVMsS0FBSyxXQUFXLE9BQU8sR0FBRztBQUN0QyxvQkFBWTtBQUNaO0FBQUEsTUFDRDtBQUNBLFVBQUksU0FBUyxLQUFLLFdBQVcsTUFBTSxHQUFHO0FBQ3JDLG9CQUFZO0FBQ1o7QUFBQSxNQUNEO0FBQ0EsVUFBSSxTQUFTLEtBQUssV0FBVyxLQUFLLEdBQUc7QUFDcEMsb0JBQVk7QUFDWjtBQUFBLE1BQ0Q7QUFDQSxVQUFJLFNBQVMsS0FBSyxXQUFXLElBQUksR0FBRztBQUNuQyxvQkFBWTtBQUNaO0FBQUEsTUFDRDtBQUVBLGNBQVEsSUFBSSxLQUFLLE1BQU0sS0FBSyxNQUFNLHVCQUFXLEtBQUs7QUFBQSxRQUNqRCxZQUFZLEVBQUMsT0FBTyxVQUFTO0FBQUEsTUFDOUIsQ0FBQyxDQUFDO0FBQUEsSUFFSDtBQUFBLEVBQ0Q7QUFDQSxTQUFPLFFBQVEsT0FBTztBQUN2QjtBQUVBLElBQXFCLFdBQXJCLGNBQXNDLHVCQUFPO0FBQUEsRUFDNUMsQUFBTSxTQUFTO0FBQUE7QUFDZCxXQUFLLHdCQUF3QixhQUFhO0FBQUEsSUFDM0M7QUFBQTtBQUFBLEVBRUEsV0FBVztBQUFBLEVBQ1g7QUFFRDsiLAogICJuYW1lcyI6IFtdCn0K
