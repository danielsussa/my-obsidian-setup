/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var indentHeading = import_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = indentHeadingExec(view);
  }
  update(update) {
    this.decorations = indentHeadingExec(update.view);
  }
}, {
  decorations: (v) => v.decorations
});
function indentHeadingExec(view) {
  const builder = new import_state.RangeSetBuilder();
  let currClass = "cm-line-child-p";
  for (const { from, to } of view.visibleRanges) {
    for (let pos = 0; pos <= to; ) {
      const line = view.state.doc.lineAt(pos);
      const lineText = view.state.doc.lineAt(pos);
      pos = line.to + 1;
      if (lineText.text.startsWith("###### ")) {
        currClass = "cm-line-child-h6";
        continue;
      }
      if (lineText.text.startsWith("##### ")) {
        currClass = "cm-line-child-h5";
        continue;
      }
      if (lineText.text.startsWith("#### ")) {
        currClass = "cm-line-child-h4";
        continue;
      }
      if (lineText.text.startsWith("### ")) {
        currClass = "cm-line-child-h3";
        continue;
      }
      if (lineText.text.startsWith("## ")) {
        currClass = "cm-line-child-h2";
        continue;
      }
      if (lineText.text.startsWith("# ")) {
        currClass = "cm-line-child-h1";
        continue;
      }
      builder.add(line.from, line.from, import_view.Decoration.line({
        attributes: { class: currClass }
      }));
    }
  }
  return builder.finish();
}
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerEditorExtension(indentHeading);
    });
  }
  onunload() {
  }
};
