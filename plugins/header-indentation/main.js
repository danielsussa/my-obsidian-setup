/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");
var import_state = require("@codemirror/state");
var indentHeading = import_view.ViewPlugin.fromClass(class {
  constructor(view) {
    this.decorations = indentHeadingExec(view);
  }
  update(update) {
    this.decorations = indentHeadingExec(update.view);
  }
}, {
  decorations: (v) => v.decorations
});
function indentHeadingExec(view) {
  const builder = new import_state.RangeSetBuilder();
  let currClass = "cm-line-child-p";
  for (const { from, to } of view.visibleRanges) {
    for (let pos = from; pos <= to; ) {
      const line = view.state.doc.lineAt(pos);
      const lineText = view.state.doc.lineAt(pos);
      pos = line.to + 1;
      if (lineText.text.startsWith("###### ")) {
        currClass = "cm-line-child-h6";
        continue;
      }
      if (lineText.text.startsWith("##### ")) {
        currClass = "cm-line-child-h5";
        continue;
      }
      if (lineText.text.startsWith("#### ")) {
        currClass = "cm-line-child-h4";
        continue;
      }
      if (lineText.text.startsWith("### ")) {
        currClass = "cm-line-child-h3";
        continue;
      }
      if (lineText.text.startsWith("## ")) {
        currClass = "cm-line-child-h2";
        continue;
      }
      if (lineText.text.startsWith("# ")) {
        currClass = "cm-line-child-h1";
        continue;
      }
      builder.add(line.from, line.from, import_view.Decoration.line({
        attributes: { class: currClass }
      }));
    }
  }
  return builder.finish();
}
var MyPlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      this.registerEditorExtension(indentHeading);
    });
  }
  onunload() {
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQge1xuXHREZWNvcmF0aW9uLFxuXHREZWNvcmF0aW9uU2V0LFxuXHRFZGl0b3JWaWV3LFxuXHRWaWV3UGx1Z2luLFxuXHRWaWV3VXBkYXRlLFxufSBmcm9tIFwiQGNvZGVtaXJyb3Ivdmlld1wiO1xuaW1wb3J0IHtSYW5nZVNldEJ1aWxkZXJ9IGZyb20gXCJAY29kZW1pcnJvci9zdGF0ZVwiO1xuLy8gQHRzLWlnbm9yZVxuXG5pbnRlcmZhY2UgTXlQbHVnaW5TZXR0aW5ncyB7XG5cdG15U2V0dGluZzogc3RyaW5nO1xufVxuXG5cbmNvbnN0IGluZGVudEhlYWRpbmcgPSBWaWV3UGx1Z2luLmZyb21DbGFzcyhjbGFzcyB7XG5cdGRlY29yYXRpb25zOiBEZWNvcmF0aW9uU2V0XG5cblx0Y29uc3RydWN0b3IodmlldzogRWRpdG9yVmlldykge1xuXHRcdHRoaXMuZGVjb3JhdGlvbnMgPSBpbmRlbnRIZWFkaW5nRXhlYyh2aWV3KVxuXHR9XG5cblx0dXBkYXRlKHVwZGF0ZTogVmlld1VwZGF0ZSkge1xuXHRcdHRoaXMuZGVjb3JhdGlvbnMgPSBpbmRlbnRIZWFkaW5nRXhlYyh1cGRhdGUudmlldylcblx0fVxufSwge1xuXHRkZWNvcmF0aW9uczogdiA9PiB2LmRlY29yYXRpb25zLFxuXG59KVxuXG5mdW5jdGlvbiBpbmRlbnRIZWFkaW5nRXhlYyh2aWV3OiBFZGl0b3JWaWV3KSB7XG5cblx0Y29uc3QgYnVpbGRlciA9IG5ldyBSYW5nZVNldEJ1aWxkZXI8RGVjb3JhdGlvbj4oKVxuXG5cdGxldCBjdXJyQ2xhc3MgPSBcImNtLWxpbmUtY2hpbGQtcFwiXG5cblx0Zm9yIChjb25zdCB7ZnJvbSwgdG99IG9mIHZpZXcudmlzaWJsZVJhbmdlcykge1xuXHRcdGZvciAobGV0IHBvcyA9IGZyb207IHBvcyA8PSB0bzspIHtcblxuXHRcdFx0Y29uc3QgbGluZSA9IHZpZXcuc3RhdGUuZG9jLmxpbmVBdChwb3MpXG5cdFx0XHRjb25zdCBsaW5lVGV4dCA9IHZpZXcuc3RhdGUuZG9jLmxpbmVBdChwb3MpXG5cdFx0XHRwb3MgPSBsaW5lLnRvICsgMVxuXG5cdFx0XHRpZiAobGluZVRleHQudGV4dC5zdGFydHNXaXRoKFwiIyMjIyMjIFwiKSkge1xuXHRcdFx0XHRjdXJyQ2xhc3MgPSBcImNtLWxpbmUtY2hpbGQtaDZcIlxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXHRcdFx0aWYgKGxpbmVUZXh0LnRleHQuc3RhcnRzV2l0aChcIiMjIyMjIFwiKSkge1xuXHRcdFx0XHRjdXJyQ2xhc3MgPSBcImNtLWxpbmUtY2hpbGQtaDVcIlxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXHRcdFx0aWYgKGxpbmVUZXh0LnRleHQuc3RhcnRzV2l0aChcIiMjIyMgXCIpKSB7XG5cdFx0XHRcdGN1cnJDbGFzcyA9IFwiY20tbGluZS1jaGlsZC1oNFwiXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cdFx0XHRpZiAobGluZVRleHQudGV4dC5zdGFydHNXaXRoKFwiIyMjIFwiKSkge1xuXHRcdFx0XHRjdXJyQ2xhc3MgPSBcImNtLWxpbmUtY2hpbGQtaDNcIlxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXHRcdFx0aWYgKGxpbmVUZXh0LnRleHQuc3RhcnRzV2l0aChcIiMjIFwiKSkge1xuXHRcdFx0XHRjdXJyQ2xhc3MgPSBcImNtLWxpbmUtY2hpbGQtaDJcIlxuXHRcdFx0XHRjb250aW51ZVxuXHRcdFx0fVxuXHRcdFx0aWYgKGxpbmVUZXh0LnRleHQuc3RhcnRzV2l0aChcIiMgXCIpKSB7XG5cdFx0XHRcdGN1cnJDbGFzcyA9IFwiY20tbGluZS1jaGlsZC1oMVwiXG5cdFx0XHRcdGNvbnRpbnVlXG5cdFx0XHR9XG5cblx0XHRcdGJ1aWxkZXIuYWRkKGxpbmUuZnJvbSwgbGluZS5mcm9tLCBEZWNvcmF0aW9uLmxpbmUoe1xuXHRcdFx0XHRhdHRyaWJ1dGVzOiB7Y2xhc3M6IGN1cnJDbGFzc31cblx0XHRcdH0pKVxuXG5cdFx0fVxuXHR9XG5cdHJldHVybiBidWlsZGVyLmZpbmlzaCgpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0YXN5bmMgb25sb2FkKCkge1xuXHRcdHRoaXMucmVnaXN0ZXJFZGl0b3JFeHRlbnNpb24oaW5kZW50SGVhZGluZylcblx0fVxuXG5cdG9udW5sb2FkKCkge1xuXHR9XG5cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUF1RDtBQUN2RCxrQkFNTztBQUNQLG1CQUE4QjtBQVE5QixJQUFNLGdCQUFnQix1QkFBVyxVQUFVLE1BQU07QUFBQSxFQUdoRCxZQUFZLE1BQWtCO0FBQzdCLFNBQUssY0FBYyxrQkFBa0IsSUFBSTtBQUFBLEVBQzFDO0FBQUEsRUFFQSxPQUFPLFFBQW9CO0FBQzFCLFNBQUssY0FBYyxrQkFBa0IsT0FBTyxJQUFJO0FBQUEsRUFDakQ7QUFDRCxHQUFHO0FBQUEsRUFDRixhQUFhLE9BQUssRUFBRTtBQUVyQixDQUFDO0FBRUQsMkJBQTJCLE1BQWtCO0FBRTVDLFFBQU0sVUFBVSxJQUFJLDZCQUE0QjtBQUVoRCxNQUFJLFlBQVk7QUFFaEIsYUFBVyxFQUFDLE1BQU0sUUFBTyxLQUFLLGVBQWU7QUFDNUMsYUFBUyxNQUFNLE1BQU0sT0FBTyxNQUFLO0FBRWhDLFlBQU0sT0FBTyxLQUFLLE1BQU0sSUFBSSxPQUFPLEdBQUc7QUFDdEMsWUFBTSxXQUFXLEtBQUssTUFBTSxJQUFJLE9BQU8sR0FBRztBQUMxQyxZQUFNLEtBQUssS0FBSztBQUVoQixVQUFJLFNBQVMsS0FBSyxXQUFXLFNBQVMsR0FBRztBQUN4QyxvQkFBWTtBQUNaO0FBQUEsTUFDRDtBQUNBLFVBQUksU0FBUyxLQUFLLFdBQVcsUUFBUSxHQUFHO0FBQ3ZDLG9CQUFZO0FBQ1o7QUFBQSxNQUNEO0FBQ0EsVUFBSSxTQUFTLEtBQUssV0FBVyxPQUFPLEdBQUc7QUFDdEMsb0JBQVk7QUFDWjtBQUFBLE1BQ0Q7QUFDQSxVQUFJLFNBQVMsS0FBSyxXQUFXLE1BQU0sR0FBRztBQUNyQyxvQkFBWTtBQUNaO0FBQUEsTUFDRDtBQUNBLFVBQUksU0FBUyxLQUFLLFdBQVcsS0FBSyxHQUFHO0FBQ3BDLG9CQUFZO0FBQ1o7QUFBQSxNQUNEO0FBQ0EsVUFBSSxTQUFTLEtBQUssV0FBVyxJQUFJLEdBQUc7QUFDbkMsb0JBQVk7QUFDWjtBQUFBLE1BQ0Q7QUFFQSxjQUFRLElBQUksS0FBSyxNQUFNLEtBQUssTUFBTSx1QkFBVyxLQUFLO0FBQUEsUUFDakQsWUFBWSxFQUFDLE9BQU8sVUFBUztBQUFBLE1BQzlCLENBQUMsQ0FBQztBQUFBLElBRUg7QUFBQSxFQUNEO0FBQ0EsU0FBTyxRQUFRLE9BQU87QUFDdkI7QUFFQSxJQUFxQixXQUFyQixjQUFzQyx1QkFBTztBQUFBLEVBQzVDLEFBQU0sU0FBUztBQUFBO0FBQ2QsV0FBSyx3QkFBd0IsYUFBYTtBQUFBLElBQzNDO0FBQUE7QUFBQSxFQUVBLFdBQVc7QUFBQSxFQUNYO0FBRUQ7IiwKICAibmFtZXMiOiBbXQp9Cg==
